on:
  pull_request:
    branches:
      - main
    types: [open]

jobs:
#  tag_release:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Github commit sha
#        run: echo "github commit sha on checkout $GITHUB_SHA"
#
#      - name: Get release commit
#        id: releaseCommit
#        run: echo "sha=$(git rev-list HEAD | head -2 | tail -1)" >> $GITHUB_OUTPUT
#
#      - name: Checkout release commit
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ steps.releaseCommit.outputs.sha }}





#      - name: Github commit sha of release commit
#        run: echo "github commit sha of release commit $(git rev-parse HEAD)"


          

  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
#        with:
#          ref: ${{ steps.releaseCommit.outputs.sha }}
#      - name: Get merged branch name
#        id: get_merged_branch
#        run: |
#          branch_name=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls" | \
#            jq -r '.[0].head.ref')
#
#          echo "BRANCH_NAME=${branch_name#*/}" >> $GITHUB_ENV

      - name: Display merged branch name
        run: |
          echo "Merged branch: ${{ github.event.pull_request.head.ref  }}"   

#      - uses: rickstaa/action-create-tag@v1
#        id: "tag_create"
#        with:
#          commit_sha: ${{ steps.releaseCommit.outputs.sha }}
#          tag: ${{ env.BRANCH_NAME }}
#          tag_exists_error: false
#          message: "Release: ${{ env.BRANCH_NAME }}"

      - uses: ncipollo/release-action@v1
        with:
          name: Release: on feature branch
          tag: v1.2.6



#      - name: Get release Id blar balr
#        id: release
#        run: |
#          git fetch origin refs/notes/commits:refs/notes/commits
#          notes_output="$(git notes show $(git rev-parse HEAD))"
#          echo "id=${notes_output#*:}" >> $GITHUB_OUTPUT
#
#      - name: git notes output
#        run: |
#          echo "output from step ${{ steps.release.outputs.id }}"
#
#      - name: Update Release
#        uses: irongut/EditRelease@v1.2.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          id: ${{ steps.release.outputs.id }}
#          prerelease: false

#      - name: update release
#        uses: actions/create-release@latest
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: 'fcds999'
#          draft: true
#          prerelease: true

#      - name: Update pre-release
#        uses: actions/github-script@v4
#        with:
#          script: |
#            await github.repos.updateRelease({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              release_id: ${{ steps.release.outputs.id }},
#              prerelease: false
#              draft: false
#            });

#
#
#
#
#        run: |
#          releaseId="${{ steps.release.outputs.id }}"
#          id=${releaseId#*:}
#          echo "we have the release id $id"
